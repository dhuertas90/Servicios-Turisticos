Object subclass: #Carrito	instanceVariableNames: 'compras servicios'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Carrito methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/25/2016 13:09'!servicios	^servicios! !!Carrito methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/25/2016 13:21'!compras: unInteger	compras := unInteger! !!Carrito methodsFor: 'accessing' stamp: 'dhuertas90 9/28/2016 22:12'!initialize	compras := 0.	servicios := OrderedCollection new! !!Carrito methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!servicios: anObject	servicios := anObject! !!Carrito methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!compras	^ compras! !Object subclass: #Buscador	instanceVariableNames: 'resultado paises'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Buscador methodsFor: 'accessing' stamp: 'dhuertas90 9/27/2016 13:11'!initialize	resultado := OrderedCollection new! !!Buscador methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!resultado	^ resultado! !!Buscador methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!resultado: anObject	resultado := anObject! !!Buscador methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!paises	^ paises! !!Buscador methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!paises: anObject	paises := anObject! !Object subclass: #Pais	instanceVariableNames: 'nombre ciudades lineasAereas'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Pais methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!ciudades: anObject	ciudades := anObject! !!Pais methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!ciudades	^ ciudades! !!Pais methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!nombre	^ nombre! !!Pais methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!lineasAereas	^ lineasAereas! !!Pais methodsFor: 'accessing' stamp: 'dhuertas90 9/27/2016 13:20'!buscarCiudad: unString	^self ciudades detect: [ :c | c nombre = unString ]					ifNone: [ ^'' ].! !!Pais methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!nombre: anObject	nombre := anObject! !!Pais methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!lineasAereas: anObject	lineasAereas := anObject! !Object subclass: #CompaniaAutos	instanceVariableNames: 'nombre autos'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!CompaniaAutos methodsFor: 'accessing' stamp: 'dhuertas90 9/28/2016 21:31'!nombre	^ nombre! !!CompaniaAutos methodsFor: 'accessing' stamp: 'dhuertas90 9/28/2016 21:31'!nombre: anObject	nombre := anObject! !!CompaniaAutos methodsFor: 'accessing' stamp: 'dhuertas90 9/28/2016 21:31'!autos	^ autos! !!CompaniaAutos methodsFor: 'accessing' stamp: 'dhuertas90 9/28/2016 21:31'!autos: anObject	autos := anObject! !!CompaniaAutos methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/28/2016 21:31'!desde: unDate hasta: otroDate! !Buscador subclass: #BuscadorVuelos	instanceVariableNames: 'estrategia'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!BuscadorVuelos methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!estrategia: anObject	estrategia := anObject! !!BuscadorVuelos methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!estrategia	^ estrategia! !Buscador subclass: #BuscadorAutos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!BuscadorAutos methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/27/2016 13:05'!buscarAutoEn: unString desde: unDate hasta: otroDate"Busca un auto disponible en una ciudad, para las fechas correspondientes."! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BuscadorAutos class	instanceVariableNames: ''!!BuscadorAutos class methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/27/2016 13:10'!conPaises: unaColeccion	^super new paises: unaColeccion ! !Object subclass: #Hotel	instanceVariableNames: 'nombre precio coeficiente habitaciones'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Hotel methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!nombre: anObject	nombre := anObject! !!Hotel methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!precio	^ precio! !!Hotel methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!precio: anObject	precio := anObject! !!Hotel methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!habitaciones: anObject	habitaciones := anObject! !!Hotel methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!coeficiente	^ coeficiente! !!Hotel methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!nombre	^ nombre! !!Hotel methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!coeficiente: anObject	coeficiente := anObject! !!Hotel methodsFor: 'accessing' stamp: 'dhuertas90 9/27/2016 19:36'!desde: unDate hasta: otroDate para: unInteger"Devuelve una coleccion con la/s habitacion/es que coinciden con el pedido del usuario."	|habSatisfacen|		"habitaciones que satisfacen los dias de manera exacta."	habSatisfacen := self habitaciones select: [ :hab | hab fechaSalida < unInteger ].	"fechaSalida no existe todavia"		"habitaciones que satisfacen la cantidad de ocupantes de manera exacta"	habSatisfacen := habSatisfacen select: [ :hab | hab capacidad = unInteger ].		"esto es en caso de que no existan habitaciones para la condicion requerida (cantidad de ocupantes y lo dias) "	"(habSatisfacen size = 0) 			ifTrue: [ habSatisfacen := self paqueteHabitacionesDesde: unDate hasta: otroDate cantidad: unInteger]."		"self paqueteHabitacionesDesde.... todavia no existe este metodo. Hace un trabajo de recolectar varias habitaciones para completar el requerimiento. devolveria una coleccion de habitaciones."		^habSatisfacen. "es una variable de tipo collection que contiene el o las habitaciones buscadas y encontradas.."! !!Hotel methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!habitaciones	^ habitaciones! !Object subclass: #Sistema	instanceVariableNames: 'buscador usuarios'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Sistema methodsFor: 'initailize-release' stamp: 'dhuertas90 9/27/2016 12:27'!initialize	usuarios := OrderedCollection new.	buscador := nil! !!Sistema methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!buscador: anObject	buscador := anObject! !!Sistema methodsFor: 'accessing' stamp: 'dhuertas90 9/24/2016 18:11'!buscador	^buscador! !!Sistema methodsFor: 'accessing' stamp: 'dhuertas90 9/24/2016 18:10'!usuarios	^usuarios! !!Sistema methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!usuarios: anObject	usuarios := anObject! !!Sistema methodsFor: 'actions' stamp: 'dhuertas90 9/24/2016 17:54'!cancelarServicio: unServicio! !!Sistema methodsFor: 'actions' stamp: 'dhuertas90 9/26/2016 17:38'!comprar"Compra todos los servicios del carrito del usuario logeado"	"ESTE METODO NO SE USARIA ACA. SIN EMBARGO LO HABIAMOS PUESTO ACA EN EL DIAGRAMA: ES UNA DUDA"	(self context sender) comprar! !!Sistema methodsFor: 'actions' stamp: 'dhuertas90 9/25/2016 18:32'!log: unUsuario|usu|		usu := self usuarios detect: [ :u | u igualA: unUsuario ] ifNone: [ nil ].	usu 		ifNotNil: [usu carrito 							ifNil: [ usu carrito: (Carrito new) ].				^true ]		ifNil: [ ^false ].! !!Sistema methodsFor: 'actions' stamp: 'dhuertas90 9/24/2016 17:54'!agregarCarrito: unServicio! !!Sistema methodsFor: 'actions' stamp: 'dhuertas90 9/24/2016 17:51'!buscarHotelEn: unaCiudad desde: fechaEntrada hasta: fechaSalida cantidad: cantPersonas! !!Sistema methodsFor: 'actions' stamp: 'dhuertas90 9/24/2016 17:53'!buscarAutoEn: unaCiudad desde: fechaInicial hasta: fechaFinal! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sistema class	instanceVariableNames: 'instance'!!Sistema class methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/27/2016 12:40'!singleton	^instance ifNil: [ instance := self new ]! !!Sistema class methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/27/2016 12:52'!reset	instance := nil! !Object subclass: #Servicio	instanceVariableNames: 'estado'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Servicio methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 17:17'!reservar	self estado: Reservado new! !!Servicio methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 16:37'!estado: unEstado	estado := unEstado! !!Servicio methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 17:11'!initialize	estado := Libre new! !!Servicio methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 17:16'!comprar	self estado: Comprado new! !!Servicio methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 16:35'!estado	^ estado! !!Servicio methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 17:17'!cancelar	self estado: Libre new! !!Servicio methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 16:37'!estadoActual"Devuelve un String con el Nombre del Estado actual"	^ estado miEstado! !Servicio subclass: #Asiento	instanceVariableNames: 'fila categoria letra ocupante'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Asiento methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!letra	^ letra! !!Asiento methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!ocupante: anObject	ocupante := anObject! !!Asiento methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!ocupante	^ ocupante! !!Asiento methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!categoria	^ categoria! !!Asiento methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!fila	^ fila! !!Asiento methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!fila: anObject	fila := anObject! !!Asiento methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!categoria: anObject	categoria := anObject! !!Asiento methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!letra: anObject	letra := anObject! !Servicio subclass: #Auto	instanceVariableNames: 'modelo precio'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Auto methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!modelo: anObject	modelo := anObject! !!Auto methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!precio: anObject	precio := anObject! !!Auto methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!modelo	^ modelo! !!Auto methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!precio	^ precio! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Auto class	instanceVariableNames: ''!!Auto class methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 18:57'!modelo: unModelo precio: unFloat	^super new modelo: unModelo;				precio: unFloat! !Buscador subclass: #BuscadorHoteles	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!BuscadorHoteles methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/27/2016 15:28'!buscarHotelEn: unString desde: unDate hasta: otroDate para: unInteger"Busca un Hotel que tenga disponible habitaciones durante ese periodo de tiempo, para la cantidad de personas pedidas.Cada Hotel devuelve la opcion mas economica. Este metodo devulve un diccionario con los resultados."	|ciudad hoteles resultados|		resultados := Dictionary new.		ciudad := self paises detect: [ :p | 								(p buscarCiudad: unString) = unString ]. "chequear lo que devuelve"								hoteles := ciudad hoteles select: [ :h | 								(h desde: unDate hasta: otroDate para: unInteger)size > 0 ]. "selecciona los - h - que cumplan con la condicion (lista de habitaciones > 0)"								(hoteles size > 0) ifTrue: [ hoteles do: [ :h | 							resultados at: (h nombre) put: (h desde: unDate hasta: otroDate para: unInteger) ] ]						ifFalse: [ "aviso que no hay resultados (no hay hoteles que complan con los requisitos" ].		"El metodo Hotel>>#desde:hasta:para:   debe devolver la/s habitacion/nes depende de el criterio sobre la disponibilidad, lo aclaramos en el hito1, puede devolver varias habitaciones que juntas completen lo requerido"						" resultados contiene CLAVE=nombre de hotel, y VALOR=lista de las habitaciones diponibles que coinciden exactamente con la busqueda."! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BuscadorHoteles class	instanceVariableNames: ''!!BuscadorHoteles class methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/27/2016 13:07'!conPaises: unaColleccion	^super new paises: unaColleccion! !Object subclass: #MapaDeAsientos	instanceVariableNames: 'costos asientos'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!MapaDeAsientos methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!asientos	^ asientos! !!MapaDeAsientos methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!asientos: anObject	asientos := anObject! !!MapaDeAsientos methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!costos: anObject	costos := anObject! !!MapaDeAsientos methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!costos	^ costos! !Object subclass: #Ciudad	instanceVariableNames: 'nombre companiasAutos hoteles'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Ciudad methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!hoteles	^ hoteles! !!Ciudad methodsFor: 'accessing' stamp: 'dhuertas90 9/28/2016 21:32'!companiasAutos: anObject	companiasAutos := anObject! !!Ciudad methodsFor: 'accessing' stamp: 'dhuertas90 9/28/2016 21:32'!companiasAutos	^ companiasAutos! !!Ciudad methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!nombre	^ nombre! !!Ciudad methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!hoteles: anObject	hoteles := anObject! !!Ciudad methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:37'!nombre: anObject	nombre := anObject! !Object subclass: #Persona	instanceVariableNames: 'nombre apellido dni fechaDeNac'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Persona methodsFor: 'accessing' stamp: 'dhuertas90 9/25/2016 18:45'!apellido: anObject	apellido := anObject! !!Persona methodsFor: 'accessing' stamp: 'dhuertas90 9/25/2016 18:45'!fechaDeNac: anObject	fechaDeNac := anObject! !!Persona methodsFor: 'accessing' stamp: 'dhuertas90 9/25/2016 18:45'!dni: anObject	dni := anObject! !!Persona methodsFor: 'accessing' stamp: 'dhuertas90 9/25/2016 18:45'!nombre	^ nombre! !!Persona methodsFor: 'accessing' stamp: 'dhuertas90 9/25/2016 18:45'!apellido	^ apellido! !!Persona methodsFor: 'accessing' stamp: 'dhuertas90 9/25/2016 18:45'!fechaDeNac	^ fechaDeNac! !!Persona methodsFor: 'accessing' stamp: 'dhuertas90 9/25/2016 18:45'!dni	^ dni! !!Persona methodsFor: 'accessing' stamp: 'dhuertas90 9/25/2016 18:45'!nombre: anObject	nombre := anObject! !!Persona methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/25/2016 13:23'!comprar! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Persona class	instanceVariableNames: ''!!Persona class methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/25/2016 18:47'!newN: unString A: otroString Dni: unEntero Nac: unDate	^ self new nombre: unString;				apellido: otroString;				dni: unEntero;				fechaDeNac: unDate! !Persona subclass: #Usuario	instanceVariableNames: 'nombreUsuario contrasena carrito'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/28/2016 21:28'!igualA: unUsuario	^(self nombreUsuario = unUsuario nombreUsuario ) and:  (self contrasena = unUsuario contrasena)! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 18:48'!cancelarServicio: unServicio"Cancelo un servicio Reservado. Guardo la busqueda en servicioEncontrado, cambio su estado y lo elimino de mi Carrito."			|servicioEncontrado|		servicioEncontrado := self servicioEnCarrito: unServicio.	servicioEncontrado estado: Libre new.		self carrito servicios remove: servicioEncontrado.! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/28/2016 18:47'!compras: unInteger	self carrito compras: (self carrito compras + unInteger).	Transcript show: self carrito compras.! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/25/2016 18:03'!nombreUsuario: unString	nombreUsuario := unString! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/28/2016 21:28'!contrasena: unString	contrasena := unString! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 17:00'!initialize	carrito := Carrito new! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/28/2016 21:28'!contrasena	^contrasena! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/25/2016 18:09'!carrito	^carrito! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 17:25'!comprar	self carrito servicios do: [ :s | s comprar ].	self compras: self carrito servicios size.	self carrito servicios: OrderedCollection new. "vacio el carrito porque ya compré"! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/25/2016 18:02'!nombreUsuario	^nombreUsuario ! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 18:12'!agregarCarrito: unServicio	unServicio estado: Reservado new. "EN TODO CASO, SI QUEREMOS UTILIZAR EL METODO #agregarCarrito:  DEL SISTEMA, ESTA LINEA DE CODIGO PUEDE ESTAR ALLI. Y le cambiamos el nombre a éste metodo."	self carrito servicios add: unServicio.! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 18:47'!servicioEnCarrito: unServicio"Busca unServicio dentro de mi Carrito y lo devuelve"	^self carrito servicios detect: [ :s | s = unServicio ] 							ifNone: [ "no devolver nada" ].		"otra vez la misma pregunta, comparar 2 servicios debe ser un metodo? || s igualA: unServicio ||"! !!Usuario methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/25/2016 18:09'!carrito: unCarrito	carrito := unCarrito! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/28/2016 21:29'!nomb: unString ape: otroString dni: unEntero nac: unDate usu: unUsu contra: unaContra	"ESTA MAL. FALTA CORREGIR!!!!"	^(super newN: unString A: otroString Dni: unEntero Nac: unDate) nombreUsuario: unUsu; contrasena: unaContra ! !Servicio subclass: #Habitacion	instanceVariableNames: 'capacidad'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Habitacion methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!capacidad	^ capacidad! !!Habitacion methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:43'!capacidad: anObject	capacidad := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Habitacion class	instanceVariableNames: ''!!Habitacion class methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 17:21'!capacidad: unInteger	^super new capacidad: unInteger! !TestCase subclass: #SistemaTest	instanceVariableNames: 'sys buscadorH buscadorA usuarioA usuarioB habitacion2p auto1'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!SistemaTest methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/27/2016 13:01'!setUp	"| unHotel |"		habitacion2p := (Habitacion capacidad: 2).	auto1 := (Auto modelo: 'ModeloA' precio: '2.500').	usuarioA := (Usuario nomb: 'David' ape: 'Huertas' dni: 35610953 nac: (21/12/1990) usu: 'dh' contra: '1234'). "Nota: corregir el new"	usuarioB := (Usuario nomb: 'Simon' ape: 'Gotta' dni: 34672722 nac: (22/4/1987) usu: 'sg' contra: 'qwerty').	usuarioA agregarCarrito: habitacion2p.		buscadorH := BuscadorHoteles new.		sys := Sistema reset.	sys := Sistema singleton.	sys usuarios add: usuarioA.	"...cargar todos los datos"	"Ejemplo:		dic := Dictionary new.	dic 		at: 'yyy' put: '1234';		at: 'zzz' put: '5678'.	unHotel := Hotel nombre: 'abcd' precio: 2000 coeficiente: dic.		listaDeHab := OrderedCollection new.	listaDeHab add: (Habitacion capacidad: 2)	unHotel habitaciones: listaDeHab.		unaCiudad := (Ciudad nombre: 'bs as').	unaCiudad hoteles add: unHotel.		unPais := Pais nombre: 'argentina'.	unPais ciudades add: unaCiudad.		coefic:=Dictionary new.	coefic		at: 'asd' put: '1.32'		...	unaLinea := LineaAerea nombre: 'lineaA' codigo: 'aaa111' coeficientes: coefic.	unPais lineasAereas add: unaLinea.		buscadorH := BuscadorHoteles paises add: unPais.		self sistema buscador: buscadorH.	"! !!SistemaTest methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 18:55'!testAgregarCarrito"Agrego un auto al Carrito, chequeo que es estado sea Reservado y que realmente sea el que está en mi Carrito. En mi Carrito ya tengo una Habitacion Reservada."		|serviciosCarrito|			usuarioA agregarCarrito: auto1.	self assert: (auto1 estadoActual) = 'Reservado'.		serviciosCarrito := usuarioA carrito servicios.	self assert: (serviciosCarrito size) = 2.	self assert: (serviciosCarrito first) = habitacion2p.	self assert: (serviciosCarrito last) = auto1. "tenemos que crear el metodo:   || Servicio>>#igualA: unServicio || ... para comparar los datos internos ? "! !!SistemaTest methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 18:38'!testComprar"Coprar el carrito de un usuario. ESTOY TESTEANDO DESDE USUARIO, NO DESDE SISTEMA.Si quiero hacer: sys comprar()  ---> necesitaria saber que usuario esta realizando la compra, deberia pasarle como argumento self. Por eso la compra se realiza desde Usuario.""Duda: 		Esta bien manipular los servicios desde Usuario realizando la compra, sin pasar por el SISTEMA?		Podría utilizar metodo #comprar del Sistema para que me devuelva un OK de algun chequeo, por ejemplo?"	|carrito|	usuarioA comprar.		carrito := usuarioA carrito.	self assert: (carrito compras) = 1.	self assert: (carrito servicios size) = 0.	self assert: (habitacion2p estadoActual) = 'Comprado'	"Duda: comprar mi carrito significa que ... a cada objeto (dentro de la lista) que compré le cambio de estado y la coleccion de servicios será vacia nuevamente? En este caso, lo hice de esa manera."! !!SistemaTest methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 18:50'!testCancelarServicio"AL IGUAL QUE EN testAgregarCarrito y testComprar EL USUARIO ES EL QUE LLAMA AL METODO QUE VAMOS A TESTEAR ( #cancelarServicio:   en este caso) "	|carrito|	usuarioA cancelarServicio: habitacion2p.		carrito := usuarioA carrito.	self assert: (carrito servicios size) = 0.	self assert: (habitacion2p estadoActual) = 'Libre'.! !!SistemaTest methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/28/2016 21:25'!testBuscarHotel"busca un hotel en determinada ciudad, durante un periodo de tiempo, para una cantidad de personas.Devuelve la habitacion disponible mas economica.De no haber habitacion disponible, devolvera distintas opciones (habitaciones) dentro del mismo hotel.""FALTA ESTE TEST !!!!""sys buscarHotelEn: 'Paris' desde: (1/1/2017) hasta: (16/1/2017) cantidad: 2.buscadorH := self sistema buscador. self assert: (buscadorH resultado size) = 1.self sistema buscarHotelEn: 'Buenos Aires' desde: (3/3/2017) hasta: (9/3/2017) cantidad: 2.buscadorH := self sistema buscador.self deny: (buscadorH resultado size) = 1."! !!SistemaTest methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 19:01'!testBuscarAuto"FALTA ESTE TEST!!!!!!"! !!SistemaTest methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/28/2016 18:58'!testLog	Transcript show: sys usuarios.	self assert: 1 equals: (sys usuarios size).	self assert: (sys log: usuarioA).	self deny: (sys log: usuarioB).! !Object subclass: #Avion	instanceVariableNames: 'tipoAvion codigo mapaAsientos'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Avion methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:36'!tipoAvion	^ tipoAvion! !!Avion methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:36'!codigo	^ codigo! !!Avion methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:36'!codigo: anObject	codigo := anObject! !!Avion methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:36'!mapaAsientos: anObject	mapaAsientos := anObject! !!Avion methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:36'!mapaAsientos	^ mapaAsientos! !!Avion methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:36'!tipoAvion: anObject	tipoAvion := anObject! !Object subclass: #LineaAerea	instanceVariableNames: 'linea codigoLinea coeficientes vuelos'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!LineaAerea methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!vuelos	^ vuelos! !!LineaAerea methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!coeficientes: anObject	coeficientes := anObject! !!LineaAerea methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!linea: anObject	linea := anObject! !!LineaAerea methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!codigoLinea: anObject	codigoLinea := anObject! !!LineaAerea methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!linea	^ linea! !!LineaAerea methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!codigoLinea	^ codigoLinea! !!LineaAerea methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!vuelos: anObject	vuelos := anObject! !!LineaAerea methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:42'!coeficientes	^ coeficientes! !Object subclass: #Estado	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Estado methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 16:32'!miEstado	self subclassResponsibility ! !Estado subclass: #Libre	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Libre methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 16:33'!miEstado	^'Libre'! !Estado subclass: #Reservado	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Reservado methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 16:33'!miEstado	^'Reservado'! !Estado subclass: #Comprado	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Comprado methodsFor: 'as yet unclassified' stamp: 'dhuertas90 9/26/2016 16:33'!miEstado	^'Comprado'! !Object subclass: #Vuelo	instanceVariableNames: 'codigo origen destino avion combinaciones'	classVariableNames: ''	poolDictionaries: ''	category: 'Servicios-Turisticos'!!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!combinaciones: anObject	combinaciones := anObject! !!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!origen	^ origen! !!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!avion	^ avion! !!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!avion: anObject	avion := anObject! !!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!codigo: anObject	codigo := anObject! !!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!origen: anObject	origen := anObject! !!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!codigo	^ codigo! !!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!destino	^ destino! !!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!combinaciones	^ combinaciones! !!Vuelo methodsFor: 'accessing' stamp: 'dhuertas90 9/26/2016 15:44'!destino: anObject	destino := anObject! !